//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DieuHanhCongTruong.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.10.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string IpAddr {
            get {
                return ((string)(this["IpAddr"]));
            }
            set {
                this["IpAddr"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string DatabaseName {
            get {
                return ((string)(this["DatabaseName"]));
            }
            set {
                this["DatabaseName"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string UserName {
            get {
                return ((string)(this["UserName"]));
            }
            set {
                this["UserName"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("USE master\r\nGO\r\nIF OBJECT_ID (\'sp_hexadecimal\') IS NOT NULL\r\n  DROP PROCEDURE sp_" +
            "hexadecimal\r\nGO\r\nCREATE PROCEDURE sp_hexadecimal\r\n    @binvalue varbinary(256),\r" +
            "\n    @hexvalue varchar (514) OUTPUT\r\nAS\r\nDECLARE @charvalue varchar (514)\r\nDECLA" +
            "RE @i int\r\nDECLARE @length int\r\nDECLARE @hexstring char(16)\r\nSELECT @charvalue =" +
            " \'0x\'\r\nSELECT @i = 1\r\nSELECT @length = DATALENGTH (@binvalue)\r\nSELECT @hexstring" +
            " = \'0123456789ABCDEF\'\r\nWHILE (@i <= @length)\r\nBEGIN\r\n  DECLARE @tempint int\r\n  D" +
            "ECLARE @firstint int\r\n  DECLARE @secondint int\r\n  SELECT @tempint = CONVERT(int," +
            " SUBSTRING(@binvalue,@i,1))\r\n  SELECT @firstint = FLOOR(@tempint/16)\r\n  SELECT @" +
            "secondint = @tempint - (@firstint*16)\r\n  SELECT @charvalue = @charvalue +\r\n    S" +
            "UBSTRING(@hexstring, @firstint+1, 1) +\r\n    SUBSTRING(@hexstring, @secondint+1, " +
            "1)\r\n  SELECT @i = @i + 1\r\nEND\r\n\r\nSELECT @hexvalue = @charvalue\r\nGO\r\n \r\nIF OBJECT" +
            "_ID (\'sp_help_revlogin\') IS NOT NULL\r\n  DROP PROCEDURE sp_help_revlogin\r\nGO\r\nCRE" +
            "ATE PROCEDURE sp_help_revlogin @login_name sysname = NULL AS\r\nDECLARE @name sysn" +
            "ame\r\nDECLARE @type varchar (1)\r\nDECLARE @hasaccess int\r\nDECLARE @denylogin int\r\n" +
            "DECLARE @is_disabled int\r\nDECLARE @PWD_varbinary  varbinary (256)\r\nDECLARE @PWD_" +
            "string  varchar (514)\r\nDECLARE @SID_varbinary varbinary (85)\r\nDECLARE @SID_strin" +
            "g varchar (514)\r\nDECLARE @tmpstr  varchar (1024)\r\nDECLARE @is_policy_checked var" +
            "char (3)\r\nDECLARE @is_expiration_checked varchar (3)\r\n\r\nDECLARE @defaultdb sysna" +
            "me\r\n \r\nIF (@login_name IS NULL)\r\n  DECLARE login_curs CURSOR FOR\r\n\r\n      SELECT" +
            " p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.d" +
            "enylogin FROM \r\nsys.server_principals p LEFT JOIN sys.syslogins l\r\n      ON ( l." +
            "name = p.name ) WHERE p.type IN ( \'S\', \'G\', \'U\' ) AND p.name <> \'sa\'\r\nELSE\r\n  DE" +
            "CLARE login_curs CURSOR FOR\r\n\r\n\r\n      SELECT p.sid, p.name, p.type, p.is_disabl" +
            "ed, p.default_database_name, l.hasaccess, l.denylogin FROM \r\nsys.server_principa" +
            "ls p LEFT JOIN sys.syslogins l\r\n      ON ( l.name = p.name ) WHERE p.type IN ( \'" +
            "S\', \'G\', \'U\' ) AND p.name = @login_name\r\nOPEN login_curs\r\n\r\nFETCH NEXT FROM logi" +
            "n_curs INTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, " +
            "@denylogin\r\nIF (@@fetch_status = -1)\r\nBEGIN\r\n  PRINT \'No login(s) found.\'\r\n  CLO" +
            "SE login_curs\r\n  DEALLOCATE login_curs\r\n  RETURN -1\r\nEND\r\nSET @tmpstr = \'/* sp_h" +
            "elp_revlogin script \'\r\nPRINT @tmpstr\r\nSET @tmpstr = \'** Generated \' + CONVERT (v" +
            "archar, GETDATE()) + \' on \' + @@SERVERNAME + \' */\'\r\nPRINT @tmpstr\r\nPRINT \'\'\r\nWHI" +
            "LE (@@fetch_status <> -1)\r\nBEGIN\r\n  IF (@@fetch_status <> -2)\r\n  BEGIN\r\n    PRIN" +
            "T \'\'\r\n    SET @tmpstr = \'-- Login: \' + @name\r\n    PRINT @tmpstr\r\n    IF (@type I" +
            "N ( \'G\', \'U\'))\r\n    BEGIN -- NT authenticated account/group\r\n\r\n      SET @tmpstr" +
            " = \'CREATE LOGIN \' + QUOTENAME( @name ) + \' FROM WINDOWS WITH DEFAULT_DATABASE =" +
            " [\' + @defaultdb + \']\'\r\n    END\r\n    ELSE BEGIN -- SQL Server authentication\r\n  " +
            "      -- obtain password and sid\r\n            SET @PWD_varbinary = CAST( LOGINPR" +
            "OPERTY( @name, \'PasswordHash\' ) AS varbinary (256) )\r\n        EXEC sp_hexadecima" +
            "l @PWD_varbinary, @PWD_string OUT\r\n        EXEC sp_hexadecimal @SID_varbinary,@S" +
            "ID_string OUT\r\n \r\n        -- obtain password policy state\r\n        SELECT @is_po" +
            "licy_checked = CASE is_policy_checked WHEN 1 THEN \'ON\' WHEN 0 THEN \'OFF\' ELSE NU" +
            "LL END FROM sys.sql_logins WHERE name = @name\r\n        SELECT @is_expiration_che" +
            "cked = CASE is_expiration_checked WHEN 1 THEN \'ON\' WHEN 0 THEN \'OFF\' ELSE NULL E" +
            "ND FROM sys.sql_logins WHERE name = @name\r\n \r\n            SET @tmpstr = \'CREATE " +
            "LOGIN \' + QUOTENAME( @name ) + \' WITH PASSWORD = \' + @PWD_string + \' HASHED, SID" +
            " = \' + @SID_string + \', DEFAULT_DATABASE = [\' + @defaultdb + \']\'\r\n\r\n        IF (" +
            " @is_policy_checked IS NOT NULL )\r\n        BEGIN\r\n          SET @tmpstr = @tmpst" +
            "r + \', CHECK_POLICY = \' + @is_policy_checked\r\n        END\r\n        IF ( @is_expi" +
            "ration_checked IS NOT NULL )\r\n        BEGIN\r\n          SET @tmpstr = @tmpstr + \'" +
            ", CHECK_EXPIRATION = \' + @is_expiration_checked\r\n        END\r\n    END\r\n    IF (@" +
            "denylogin = 1)\r\n    BEGIN -- login is denied access\r\n      SET @tmpstr = @tmpstr" +
            " + \'; DENY CONNECT SQL TO \' + QUOTENAME( @name )\r\n    END\r\n    ELSE IF (@hasacce" +
            "ss = 0)\r\n    BEGIN -- login exists but does not have access\r\n      SET @tmpstr =" +
            " @tmpstr + \'; REVOKE CONNECT SQL TO \' + QUOTENAME( @name )\r\n    END\r\n    IF (@is" +
            "_disabled = 1)\r\n    BEGIN -- login is disabled\r\n      SET @tmpstr = @tmpstr + \';" +
            " ALTER LOGIN \' + QUOTENAME( @name ) + \' DISABLE\'\r\n    END\r\n    PRINT @tmpstr\r\n  " +
            "END\r\n\r\n  FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disab" +
            "led, @defaultdb, @hasaccess, @denylogin\r\n   END\r\nCLOSE login_curs\r\nDEALLOCATE lo" +
            "gin_curs\r\nRETURN 0")]
        public string Procedure {
            get {
                return ((string)(this["Procedure"]));
            }
            set {
                this["Procedure"] = value;
            }
        }
    }
}
